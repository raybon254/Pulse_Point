"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHiddenRouter = useHiddenRouter;
exports.usePause = usePause;
exports.HiddenRouter = HiddenRouter;

var _react = _interopRequireWildcard(require("react"));

var _history = require("history");

var _Router = require("./Router");

var _HiddenHistory = require("./HiddenHistory");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const HiddenRouterContext = (0, _react.createContext)();

function useHiddenRouter() {
  return (0, _react.useContext)(HiddenRouterContext);
}

function usePause() {
  const resolve = (0, _react.useRef)();
  const promise = (0, _react.useMemo)(() => new Promise(r => {
    resolve.current = r;
  }), []);
  const hiddenRouter = useHiddenRouter();
  (0, _react.useEffect)(() => {
    if (hiddenRouter) {
      hiddenRouter.waitForPromise(promise);
    }
  }, [hiddenRouter, promise]);
  return resolve.current;
}

function createURL(location) {
  return typeof location === 'string' ? location : (0, _history.createPath)(location);
}

function HiddenRouter({
  children
}) {
  const {
    history
  } = (0, _Router.useRouter)();
  const hiddenHistory = (0, _HiddenHistory.useHiddenHistory)();
  const promises = (0, _react.useRef)([]);
  const timeoutRef = (0, _react.useRef)();
  const flush = (0, _react.useCallback)(() => {
    if (promises.current.length || !hiddenHistory.state) return;
    const [method, action, state] = hiddenHistory.state;
    history[method](action, state);
    hiddenHistory.reset();
  }, [hiddenHistory, history]);
  const waitForPromise = (0, _react.useCallback)(promise => {
    if (promises.current.includes(promise)) return;
    promise.then(() => {
      const index = promises.current.indexOf(promise);

      if (index !== -1) {
        promises.current.splice(index, 1);
      } // 65ms is 4 frames, pretty invisible when we change page
      // it ensures that React have time to start a new request for an example


      clearTimeout(timeoutRef.current);
      timeoutRef.current = setTimeout(() => flush(), 65);
    });
    promises.current.push(promise);
  }, [flush]);
  const hiddenRouter = (0, _react.useMemo)(() => ({
    waitForPromise
  }), [waitForPromise]);
  const staticHistory = (0, _react.useMemo)(() => {
    if (!hiddenHistory.location) return null;

    const noop = () => {};

    return {
      action: 'POP',
      location: hiddenHistory.location,
      push: noop,
      replace: noop,
      go: noop,
      goBack: noop,
      goForward: noop,
      listen: () => noop,
      block: () => noop,
      createHref: path => createURL(path)
    };
  }, [hiddenHistory.location]);
  return staticHistory ? _react.default.createElement("div", {
    style: {
      display: 'none'
    },
    hidden: true
  }, _react.default.createElement(HiddenRouterContext.Provider, {
    value: hiddenRouter
  }, _react.default.createElement(_Router.Router, {
    history: staticHistory
  }, children))) : null;
}