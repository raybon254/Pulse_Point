"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavLink = exports.Link = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _i18n = require("../i18n");

var _HiddenLinkRouter = require("./HiddenLinkRouter");

var _CoreRouter = require("./CoreRouter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function createLink(Component) {
  const Link = (_ref) => {
    let {
      waitBeforeTransition,
      onClick
    } = _ref,
        props = _objectWithoutPropertiesLoose(_ref, ["waitBeforeTransition", "onClick"]);

    const routerReady = (0, _CoreRouter.useIsRouterReady)();
    const lang = (0, _i18n.useLang)();
    const to = (0, _i18n.formatLangUrl)(props.to, lang);

    const handleClick = _react.default.useCallback(event => {
      if (onClick) {
        onClick(event);
      }

      if (!routerReady) {
        event.preventDefault(); // eslint-disable-next-line

        window.location = to;
      }
    }, [to, routerReady, onClick]);

    const link = _react.default.createElement(Component, _extends({}, props, {
      to: to,
      onClick: handleClick
    }));

    return waitBeforeTransition ? _react.default.createElement(_HiddenLinkRouter.HiddenLinkRouter, null, link) : link;
  };

  Link.displayName = `enhanced(${Component.name})`;
  return Link;
}

const Link = createLink(_reactRouterDom.Link);
exports.Link = Link;
const NavLink = createLink(_reactRouterDom.NavLink);
exports.NavLink = NavLink;