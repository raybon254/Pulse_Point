"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RouterHooks = RouterHooks;

var _react = _interopRequireWildcard(require("react"));

var _Router = require("./Router");

var _browserHooks = require("../plugin/browserHooks");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function usePreviousLocation(location) {
  const previousLocation = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    previousLocation.current = location.pathname;
  }, [location.pathname]);
  return previousLocation.current;
}

function useScrollTop({
  location,
  prevLocation
}) {
  (0, _react.useEffect)(() => {
    if (prevLocation && prevLocation.pathname !== location.pathname) {
      // eslint-disable-next-line
      window.scrollTo(0, 0);
    }
  }, [location, prevLocation]);
}

function RouterHooksInternal({
  location
}) {
  const prevLocation = usePreviousLocation(location);
  const options = {
    location,
    prevLocation
  };
  useScrollTop(options);
  (0, _browserHooks.onRouteUpdate)(options);
  return null;
}

function RouterHooks() {
  const {
    location
  } = (0, _Router.useRouter)();
  if (location.hidden) return null;
  return _react.default.createElement(RouterHooksInternal, {
    location: location
  });
}