"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HiddenHistoryProvider = HiddenHistoryProvider;
exports.useHiddenHistory = useHiddenHistory;
exports.useMixedHiddenHistory = useMixedHiddenHistory;

var _react = _interopRequireWildcard(require("react"));

var _history = require("history");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const HiddenHistoryContext = (0, _react.createContext)();

function createHiddenLocation(state) {
  if (!state) return null;
  const location = (0, _history.createLocation)(state[1], state[2]);
  location.hidden = true;
  return location;
}

function HiddenHistoryProvider({
  children
}) {
  const [state, setState] = (0, _react.useState)(null);
  const reset = (0, _react.useCallback)(() => setState(null), []);
  const push = (0, _react.useCallback)((location, state) => setState(['push', location, state]), []);
  const replace = (0, _react.useCallback)((location, state) => setState(['replace', location, state]), []);
  const hiddenHistory = (0, _react.useMemo)(() => ({
    location: createHiddenLocation(state),
    state,
    reset,
    push,
    replace
  }), [push, replace, reset, state]);
  return _react.default.createElement(HiddenHistoryContext.Provider, {
    value: hiddenHistory
  }, children);
}

function useHiddenHistory() {
  return (0, _react.useContext)(HiddenHistoryContext);
} // Create a local history, a mix with original history & hiddenHistory


function useMixedHiddenHistory(originalHistory = {}) {
  const hiddenHistory = useHiddenHistory();
  const mixedHistory = (0, _react.useRef)({});
  Object.assign(mixedHistory.current, originalHistory);
  mixedHistory.current.push = hiddenHistory.push;
  mixedHistory.current.replace = hiddenHistory.replace;

  if (hiddenHistory.location) {
    mixedHistory.current.location = hiddenHistory.location;
  }

  return mixedHistory.current;
}