"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addBlockTypeDefinitions = addBlockTypeDefinitions;

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var t = _interopRequireWildcard(require("../types"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addBlockTypeDefinitions(schemaDefinition) {
  const {
    typeDefs
  } = schemaDefinition;
  const blockDefinitions = typeDefs.definitions.filter(typeDefinition => t.isObjectTypeDefinition(typeDefinition) && t.hasDirective(typeDefinition, directive => t.isName(directive.name, {
    value: 'block'
  })));
  const {
    definitions: [blockDefinition]
  } = _graphqlTag.default`
    type Block {
      type: String!
      ${blockDefinitions.map(def => `${def.name.value}_props: ${def.name.value}`).join('\n')}
    }
  `;
  typeDefs.definitions.push(blockDefinition);
  return schemaDefinition;
}