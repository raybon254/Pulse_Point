"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addContentTypeDefinitions = addContentTypeDefinitions;

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var _camelcase = _interopRequireDefault(require("camelcase"));

var t = _interopRequireWildcard(require("../types"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getQueries(contentDefinitions) {
  return contentDefinitions.map(def => {
    const name = t.getName(def);
    const queryName = (0, _camelcase.default)(name);
    return `${queryName}(slug: String!): ${name}`;
  });
}

const {
  definitions: [{
    fields: [metadataField]
  }]
} = _graphqlTag.default`
  type Foo {
    metadata: Metadata!
  }
`;

function addContentTypeDefinitions(schemaDefinition) {
  const {
    typeDefs
  } = schemaDefinition;
  const contentDefinitions = typeDefs.definitions.filter(type => t.isObjectTypeDefinition(type) && t.hasDirective(type, directive => t.isName(directive.name, {
    value: 'content'
  })));
  contentDefinitions.forEach(type => type.fields.push(metadataField));
  const {
    definitions: [queryDefinition]
  } = _graphqlTag.default`
    type Query {
      ping: Boolean
      ${getQueries(contentDefinitions).join('\n')}
    }
  `;
  typeDefs.definitions.push(queryDefinition);
  return schemaDefinition;
}