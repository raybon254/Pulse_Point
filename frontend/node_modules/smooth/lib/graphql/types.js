"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.is = is;
exports.getName = getName;
exports.getValue = getValue;
exports.getDirective = getDirective;
exports.getArg = getArg;
exports.getArgv = getArgv;
exports.getContentSlug = getContentSlug;
exports.resolveType = resolveType;
exports.findTypeDefinition = findTypeDefinition;
exports.getKnownType = getKnownType;
exports.getFieldInfos = getFieldInfos;
exports.hasDirective = exports.isNamedType = exports.isListType = exports.isNonNullType = exports.isArgument = exports.isDirective = exports.isUnionTypeDefinition = exports.isEnumTypeDefinition = exports.isObjectTypeDefinition = exports.isFieldDefinition = exports.isName = void 0;

var _slugify = _interopRequireDefault(require("slugify"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Validators
function is(kind, node, opts) {
  if (!node) return false;
  const matches = node.kind === kind;
  if (!matches) return false;

  if (typeof opts === 'undefined') {
    return true;
  }

  return (0, _utils.shallowEqual)(node, opts);
}

const isName = is.bind(null, 'Name');
exports.isName = isName;
const isFieldDefinition = is.bind(null, 'FieldDefinition');
exports.isFieldDefinition = isFieldDefinition;
const isObjectTypeDefinition = is.bind(null, 'ObjectTypeDefinition');
exports.isObjectTypeDefinition = isObjectTypeDefinition;
const isEnumTypeDefinition = is.bind(null, 'EnumTypeDefinition');
exports.isEnumTypeDefinition = isEnumTypeDefinition;
const isUnionTypeDefinition = is.bind(null, 'UnionTypeDefinition');
exports.isUnionTypeDefinition = isUnionTypeDefinition;
const isDirective = is.bind(null, 'Directive');
exports.isDirective = isDirective;
const isArgument = is.bind(null, 'Argument');
exports.isArgument = isArgument;
const isNonNullType = is.bind(null, 'NonNullType');
exports.isNonNullType = isNonNullType;
const isListType = is.bind(null, 'ListType');
exports.isListType = isListType;
const isNamedType = is.bind(null, 'NamedType');
exports.isNamedType = isNamedType;

const hasDirective = (node, test) => {
  if (!node.directives) return null;
  return node.directives.find(directive => isDirective(directive) && test(directive));
}; // Getters


exports.hasDirective = hasDirective;

function getName(node) {
  return node.name.value;
}

function getValue(node) {
  return node.value.value;
}

function getDirective(node, name) {
  if (!node.directives) return null;
  return node.directives.find(directive => isDirective(directive) && isName(directive.name, {
    value: name
  }));
}

function getArg(node, name) {
  if (!node.arguments) return null;
  return node.arguments.find(arg => isArgument(arg) && isName(arg.name, {
    value: name
  }));
}

function getArgv(node, name) {
  const arg = getArg(node, name);
  return arg ? getValue(arg) : null;
}

function getContentSlug(node) {
  const contentDirective = getDirective(node, 'content');
  if (!contentDirective) return null;
  const slugArgument = getArg(contentDirective, 'slug');
  return slugArgument ? getValue(slugArgument) : (0, _slugify.default)(getName(node), {
    lower: true
  });
}

function resolveType(type) {
  return isNonNullType(type) ? type.type : type;
}

function findTypeDefinition(node, docNode) {
  return docNode.definitions.find(defNode => (isObjectTypeDefinition(defNode) || isEnumTypeDefinition(defNode) || isUnionTypeDefinition(defNode)) && isName(defNode.name, {
    value: node.name.value
  }));
}

function getKnownType(type) {
  switch (type.name.value) {
    case 'String':
      return 'shortText';

    case 'Image':
      return 'image';

    case 'Media':
      return 'media';

    case 'Link':
      return 'link';

    case 'Boolean':
      return 'boolean';

    case 'Int':
      return 'integer';

    case 'Float':
      return 'float';

    case 'Date':
      return 'date';

    case 'DateTime':
      return 'dateTime';

    case 'Time':
      return 'time';

    case 'Block':
      return 'block';

    default:
      return null;
  }
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function getFieldType(type, directive, ast) {
  const fieldType = directive ? getArgv(directive, 'type') : null;
  if (fieldType) return {
    name: fieldType,
    typeNode: type
  };
  const knownType = getKnownType(type);
  if (knownType) return {
    name: knownType,
    typeNode: type
  };
  const typeDefinition = findTypeDefinition(type, ast);
  if (!typeDefinition) return null;

  if (isObjectTypeDefinition(typeDefinition)) {
    const content = getContentSlug(typeDefinition);

    if (content) {
      return {
        name: 'relation',
        content,
        typeNode: type,
        typeDefinitionNode: typeDefinition
      };
    }

    return {
      name: 'object',
      typeNode: type,
      typeDefinitionNode: typeDefinition
    };
  }

  if (isEnumTypeDefinition(typeDefinition)) {
    return {
      name: 'enum',
      typeNode: type,
      typeDefinitionNode: typeDefinition
    };
  }

  if (isUnionTypeDefinition(typeDefinition)) {
    return {
      name: 'union',
      typeNode: type,
      typeDefinitionNode: typeDefinition,
      types: typeDefinition.types.map(subType => getFieldType(subType, null, ast))
    };
  }

  return null;
}

function getFieldInfos(node, ast) {
  const directive = getDirective(node, 'field');
  if (!directive) return null;
  const required = isNonNullType(node.type);
  const name = getName(node);
  const label = getArgv(directive, 'label') || capitalizeFirstLetter(name);
  let type = resolveType(node.type);
  const list = isListType(type);

  if (list) {
    type = resolveType(type.type);
  }

  const fieldType = getFieldType(type, directive, ast);

  if (!fieldType) {
    throw new Error(`Uncompatible field "${name}"`);
  }

  return {
    name,
    label,
    description: node.description ? node.description.value : null,
    required,
    list,
    type: fieldType
  };
}