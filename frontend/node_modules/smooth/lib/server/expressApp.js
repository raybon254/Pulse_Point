"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExpressApp = createExpressApp;

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _errorhandler = _interopRequireDefault(require("errorhandler"));

var _cors = _interopRequireDefault(require("cors"));

var _apolloServerExpress = require("apollo-server-express");

var _apollo = require("./apollo");

var _ssr = _interopRequireDefault(require("./ssr"));

var _nodeHooks = require("../plugin/nodeHooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createExpressApp({
  dev,
  config,
  schema,
  fragmentTypes,
  webpackMiddleware
}) {
  const app = (0, _express.default)();
  (0, _nodeHooks.onCreateServer)(config)({
    app
  });
  app.use((0, _cors.default)());
  app.get('/favicon.ico', (req, res) => {
    res.send(null);
  });
  app.use('/web', _express.default.static(_path.default.join(config.cachePath, 'web'), dev ? {} : {
    immutable: true,
    maxage: 31536000000
  }));
  app.use('/static', _express.default.static(config.staticPath, dev ? {} : {
    immutable: true,
    maxage: 31536000000
  }));

  if (webpackMiddleware) {
    app.use(webpackMiddleware);
  }

  const apolloServerConfig = (0, _nodeHooks.onCreateApolloServerConfig)(config)({
    apolloServerConfig: {
      schema,
      context: ({
        req
      }) => (0, _apollo.getContext)({
        req,
        config
      })
    }
  });
  const apolloServer = new _apolloServerExpress.ApolloServer(apolloServerConfig);
  apolloServer.applyMiddleware({
    app
  });
  app.use((0, _ssr.default)({
    config,
    schema,
    fragmentTypes
  }));
  app.use((error, req, res, next) => {
    (0, _nodeHooks.onServerError)(config)({
      error,
      req
    });
    next(error);
  });

  if (config.env === 'development') {
    app.use((error, req, res, next) => {
      const graphQLErrors = (error.networkError ? error.networkError.errors : null) || error.graphQLErrors;

      if (graphQLErrors) {
        const lines = ['Error: GraphQL & Apollo'];
        graphQLErrors.forEach((graphQLError, index) => {
          lines.push(`--- GraphQL Error #${index}: ${graphQLError.path ? graphQLError.path.join(' > ') : 'validation'}`);
          lines.push(graphQLError.stack);
          lines.push('   \n   \n');
        });
        lines.push('--- Original Error');
        lines.push(error.stack);
        error.stack = lines.join('\n');
      } // eslint-disable-next-line no-console


      console.error(error.stack);
      next(error);
    });
  }

  app.use((error, req, res, next) => {
    (0, _ssr.default)({
      config,
      schema,
      fragmentTypes,
      error,
      dev
    })(req, res, next);
  });
  app.use((0, _errorhandler.default)({
    log: false
  }));
  return app;
}