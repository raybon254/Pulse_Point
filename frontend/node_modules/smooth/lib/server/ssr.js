"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ssrMiddleware;

var _path = _interopRequireDefault(require("path"));

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactApollo = require("react-apollo");

var _server = require("react-dom/server");

var _server2 = require("@loadable/server");

var _expressAsyncHandler = _interopRequireDefault(require("express-async-handler"));

var _apollo = require("./apollo");

var _ApolloState = _interopRequireDefault(require("./components/ApolloState"));

var _SmoothError = _interopRequireDefault(require("./components/SmoothError"));

var _nodeHooks = require("../plugin/nodeHooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ssrMiddleware({
  config,
  schema,
  fragmentTypes,
  error = null
}) {
  return (0, _expressAsyncHandler.default)(async (req, res) => {
    const nodeStats = _path.default.resolve(config.cachePath, 'node/static/loadable-stats.json');

    const webStats = _path.default.resolve(config.cachePath, 'web/static/loadable-stats.json');

    const nodeExtractor = new _server2.ChunkExtractor({
      statsFile: nodeStats,
      outputPath: _path.default.join(config.cachePath, 'node/static')
    });
    const {
      Root,
      Html,
      ErrorContextProvider
    } = nodeExtractor.requireEntrypoint();
    const webExtractor = new _server2.ChunkExtractor({
      statsFile: webStats
    });
    const routerContext = {};
    const apolloClient = (0, _apollo.createApolloClient)({
      schema,
      fragmentTypes,
      context: operation => (0, _apollo.getContext)({
        req,
        config,
        operationContext: operation.getContext()
      })
    });

    let jsx = _react.default.createElement(ErrorContextProvider, {
      error: error
    }, _react.default.createElement(_reactApollo.ApolloProvider, {
      client: apolloClient
    }, _react.default.createElement(_reactRouterDom.StaticRouter, {
      location: req.url,
      context: routerContext
    }, _react.default.createElement(Root, {
      error: error
    })))); // Generate unique request id


    const requestId = Math.random().toString(36).substring(7);
    const rootElement = (0, _nodeHooks.wrapRootElement)(config)({
      element: jsx,
      pathname: req.url,
      requestId
    }); // Loadable components

    jsx = webExtractor.collectChunks(jsx);
    await (0, _reactApollo.getDataFromTree)(jsx);
    const apolloState = apolloClient.cache.extract(); // Render app HTML

    const appHtml = (0, _server.renderToString)(rootElement); // Handle React router status

    if (routerContext.status) {
      res.status(routerContext.status);
    } // Handle React Router redirection


    if (routerContext.url) {
      const status = routerContext.status === 301 ? 301 : 302;
      res.redirect(status, routerContext.url);
      return;
    }

    const headComponents = webExtractor.getStyleElements();
    const postBodyComponents = [_react.default.createElement(_SmoothError.default, {
      key: "smooth-error",
      error: error
    }), _react.default.createElement(_ApolloState.default, {
      key: "apollo-state",
      state: apolloState
    }), ...webExtractor.getScriptElements()];
    const pluginProps = (0, _nodeHooks.onRenderBody)(config)({
      headComponents,
      postBodyComponents,
      pathname: req.url,
      requestId
    });
    const html = (0, _server.renderToString)(_react.default.createElement(Html, _extends({}, pluginProps, {
      body: appHtml
    })));
    res.set('content-type', 'text/html');
    res.end(`<!DOCTYPE html>${html}`);
  });
}