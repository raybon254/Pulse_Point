"use strict";

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

var _progressEstimator = _interopRequireDefault(require("progress-estimator"));

var _config = require("../config");

var _server = require("../server");

var _build = require("../build");

var _require = _interopRequireDefault(require("../babel/require"));

var _api = require("../api");

var _process = _interopRequireDefault(require("../seeds/process"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
const logger = (0, _progressEstimator.default)();

function watch({
  config
}) {
  let webpackWatcher;
  const schemaWatcher = (0, _build.watchSchema)({
    config,
    logger: promise => logger(promise, 'Build schemas')
  });
  schemaWatcher.on('done', ({
    schema,
    fragmentTypes
  }) => {
    if (!webpackWatcher) {
      webpackWatcher = (0, _build.watchWebpack)({
        config,
        logger: promise => logger(promise, 'Build webpack')
      });
      webpackWatcher.once('done', () => {
        console.log('🚀 Ready on http://localhost:3000');
      }); // eslint-disable-next-line no-console

      webpackWatcher.on('error', console.error);
    }

    (0, _server.start)({
      dev: true,
      schema,
      fragmentTypes,
      config,
      webpackMiddleware: webpackWatcher.middleware
    });
  }); // eslint-disable-next-line no-console

  schemaWatcher.on('error', console.error);
}

function clearConsole() {
  process.stdout.write(process.platform === 'win32' ? '\x1B[2J\x1B[0f' : '\x1B[2J\x1B[3J\x1B[H');
}

async function devCommand() {
  clearConsole();
  console.log('> smooth.js 👨‍🚀');
  const config = await (0, _config.getConfig)({
    dev: true
  });
  await logger((0, _build.buildBrowser)({
    config
  }), 'Setup project');
  watch({
    config
  });
}

async function logBuild(operation, name) {
  console.log(`Building ${name}`);
  const timeKey = `Build ${name}`;
  console.time(timeKey);
  await operation();
  console.timeEnd(timeKey);
}

async function buildCommand() {
  const config = await (0, _config.getConfig)({
    dev: false
  });
  await logBuild(() => (0, _build.buildBrowser)({
    config
  }), 'plugins');
  await logBuild(() => (0, _build.buildSchema)({
    config
  }), 'schema');
  await logBuild(() => (0, _build.buildWebpack)({
    config
  }), 'webpack'); // eslint-disable-next-line no-console

  console.log('Built!');
}

async function startCommand() {
  const config = await (0, _config.getConfig)({
    dev: false
  });
  const {
    schema
  } = await (0, _build.buildSchemaDefinition)({
    config
  }); // eslint-disable-next-line global-require, import/no-dynamic-require

  const fragmentTypes = require(_path.default.join(config.cachePath, 'fragmentTypes.json'));

  (0, _server.start)({
    dev: false,
    schema,
    fragmentTypes,
    config
  });
  console.log('Started 🚀');
}

async function seedCommand() {
  const config = await (0, _config.getConfig)({
    dev: false
  });
  const api = (0, _api.createAPIClient)({
    config
  });
  await (0, _process.default)({
    api,
    config,
    createSeeds: (0, _require.default)(config.seedsPath).default,
    logger
  });
  console.log('Seeded 🍙');
}

function runCmd(command) {
  command().catch(error => {
    // eslint-disable-next-line no-console
    console.error(error);
  });
}

_commander.default.command('dev').description('Starts the application in development mode (hot-code reloading, error reporting, etc)').action(() => runCmd(devCommand));

_commander.default.command('build').description('Compiles the application for production deployment').action(() => runCmd(buildCommand));

_commander.default.command('start').description('Starts the application in production mode.\nThe application should be compiled with `smooth build` first.').action(() => runCmd(startCommand));

_commander.default.command('seed').description('Seeds the application using ./seeds directory.').action(() => runCmd(seedCommand));

_commander.default.parse(process.argv);