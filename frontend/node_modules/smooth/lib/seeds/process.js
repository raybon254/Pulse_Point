"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = process;

var _tinyGlob = _interopRequireDefault(require("tiny-glob"));

var _camelcase = _interopRequireDefault(require("camelcase"));

var _require = _interopRequireDefault(require("../babel/require"));

var _nodeHooks = require("../plugin/nodeHooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function collectCommands({
  createSeeds,
  onCreateBackendPayload: onCreateBackendPayloadDefault
}) {
  const commands = [];

  function createContents({
    onCreateBackendPayload = onCreateBackendPayloadDefault,
    onCreateContents,
    type
  }) {
    commands.push({
      label: 'createContents',
      onCreateBackendPayload,
      onCreateContents,
      type
    });
  }

  function createContentsFromFolder({
    node,
    webpack,
    onCreateBackendPayload = onCreateBackendPayloadDefault
  }) {
    commands.push({
      label: 'createContentsFromFolder',
      node,
      onCreateBackendPayload,
      webpack
    });
  }

  function createMediaFromFolder({
    node,
    onCreateBackendPayload = onCreateBackendPayloadDefault,
    webpack
  }) {
    commands.push({
      label: 'createMediaFromFolder',
      node,
      onCreateBackendPayload,
      type: 'media',
      webpack
    });
  }

  createSeeds({
    actions: {
      createContents,
      createContentsFromFolder,
      createMediaFromFolder
    }
  }); // eslint-disable-next-line no-use-before-define

  return resolveContentsFromFolder({
    commands
  });
}

async function resolveContentsFromFolder({
  commands = []
}) {
  if (!commands.length) {
    return commands;
  }

  const [command, ...otherCommands] = commands;

  if (command.label !== 'createContentsFromFolder') {
    return [command, ...(await resolveContentsFromFolder({
      commands: otherCommands
    }))];
  }

  const files = await command.node({
    glob: ({
      cwd,
      path
    }) => (0, _tinyGlob.default)(path, {
      cwd,
      absolute: true
    })
  });
  const commandsFromFolder = []; // eslint-disable-next-line no-restricted-syntax

  for (const file of files) {
    commandsFromFolder.push( // eslint-disable-next-line no-await-in-loop
    ...(await collectCommands({
      createSeeds: (0, _require.default)(file).default,
      onCreateBackendPayload: command.onCreateBackendPayload
    })));
  }

  return [...commandsFromFolder, ...(await resolveContentsFromFolder({
    commands: otherCommands
  }))];
}

async function process({
  api,
  config,
  createSeeds,
  logger
}) {
  const commands = await collectCommands({
    createSeeds
  });
  const output = {};
  const createBackendPayloadHook = (0, _nodeHooks.createBackendPayload)(config);
  /* eslint-disable no-await-in-loop, no-loop-func */
  // eslint-disable-next-line no-restricted-syntax

  for (const command of commands) {
    await logger((async () => {
      const type = (0, _camelcase.default)(command.type);
      const payload = [];

      function createContent({
        name,
        data
      }) {
        if (command.onCreateBackendPayload) {
          command.onCreateBackendPayload({
            actions: {
              createBackendPayload(data) {
                payload.push({
                  data,
                  name
                });
              }

            },
            data: createBackendPayloadHook({
              data,
              name,
              type: command.type
            }),
            name
          });
        } else {
          payload.push({
            data: createBackendPayloadHook({
              data,
              name,
              type: command.type
            }),
            name
          });
        }
      }

      switch (command.label) {
        case 'createContents':
          {
            command.onCreateContents({
              actions: {
                createContent
              },
              output
            });
            break;
          }

        case 'createMediaFromFolder':
          {
            const files = await command.node({
              glob: ({
                cwd,
                path
              }) => (0, _tinyGlob.default)(path, {
                cwd,
                absolute: true
              })
            });
            files.forEach(data => {
              const name = data.replace(/^.*?([^/]+?)(\.[^.]+)?$/, '$1');
              createContent({
                name,
                data
              });
            });
            break;
          }

        default:
          {
            throw new Error(`Unexpected command ${command.label}`);
          }
      }

      if (!output[type]) {
        output[type] = {};
        await api.truncate({
          type: command.type
        });
      }

      await api.createMany({
        type: command.type,
        data: payload.map(({
          data
        }) => data)
      }).then(response => {
        response.forEach((data, i) => {
          output[type][payload[i].name] = data.id;
        });
      });
    })(), `Generate ${command.type}`);
  }
  /* eslint-enable no-await-in-loop, no-loop-func */


  return output;
}