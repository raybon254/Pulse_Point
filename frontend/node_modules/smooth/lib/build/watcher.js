"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watchFs = watchFs;
exports.Watcher = void 0;

var _events = _interopRequireDefault(require("events"));

var _chokidar = _interopRequireDefault(require("chokidar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Watcher extends _events.default {
  constructor(task) {
    super();
    this.close = null;
    this.tickId = 0;
    this.task = task;
    this.pending = false;
    this.ready = false;
  }

  tick() {
    if (!this.pending) {
      this.emit('run');
    }

    this.pending = true;
    this.tickId += 1;
    const {
      tickId
    } = this;
    this.task().then(result => {
      this.emitForTick(tickId, 'done', result);

      if (!this.ready) {
        this.emitForTick(tickId, 'ready', result);
      }

      if (tickId === this.tickId) {
        this.pending = false;
        this.ready = true;
      }
    }).catch(error => {
      this.emitForTick(tickId, 'error', error);

      if (tickId === this.tickId) {
        this.pending = false;
      }
    });
  }

  emitForTick(tickId, event, value) {
    if (tickId === this.tickId) {
      this.emit(event, value);
    }
  }

}

exports.Watcher = Watcher;

function watchFs(filePath, task) {
  const fsWatcher = _chokidar.default.watch(filePath, {
    ignored: /(^|[/\\])\../
  });

  fsWatcher.on('ready', () => {
    task();
    fsWatcher.on('all', () => task());
  });
}