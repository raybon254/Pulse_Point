"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOperationProps = useOperationProps;

var _react = _interopRequireWildcard(require("react"));

var _queryString = _interopRequireDefault(require("query-string"));

var _i18n = require("../i18n");

var _router = require("../router");

var _HiddenRouter = require("../router/HiddenRouter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function PrefetchHandler(_ref) {
  let {
    children
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  const unpause = (0, _HiddenRouter.usePause)();
  (0, _react.useEffect)(() => {
    if (!props.loading) {
      unpause();
    }
  }, [props.loading, unpause]);
  return children(props);
}

function useOperationContext(props) {
  const lang = (0, _i18n.useLang)();
  const {
    location
  } = (0, _router.useRouter)();
  const headers = {};

  if (lang) {
    headers['x-smooth-lang'] = lang;
  }

  if (props.pageContent) {
    const {
      id,
      preview
    } = _queryString.default.parse(location.search);

    if (preview) {
      headers['x-smooth-preview-id'] = id;
      headers['x-smooth-preview'] = 1;
    }
  }

  return {
    headers
  };
}

function useRequestHandler(props) {
  const propsRef = (0, _react.useRef)({});
  propsRef.current = props;
  return (0, _react.useCallback)(result => {
    if (propsRef.current.prefetch) return _react.default.createElement(PrefetchHandler, result, propsRef.current.children);
    return propsRef.current.children(result);
  }, []);
}

function useOperationProps(props) {
  const context = useOperationContext(props);
  const children = useRequestHandler(props);
  return _extends({}, props, {
    context,
    children
  });
}