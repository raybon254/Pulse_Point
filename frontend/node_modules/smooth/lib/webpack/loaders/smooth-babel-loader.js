"use strict";

var _babelLoader = _interopRequireDefault(require("babel-loader"));

var _preset = _interopRequireDefault(require("../../babel/preset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable prefer-object-spread */

/* eslint-disable no-restricted-syntax */
module.exports = _babelLoader.default.custom(babel => {
  const presetItem = babel.createConfigItem(_preset.default, {
    type: 'preset'
  });
  const configs = new Set();
  return {
    customOptions(opts) {
      const custom = {
        isServer: opts.isServer,
        dev: opts.dev
      };
      const loader = Object.assign({
        cacheCompression: false,
        cacheDirectory: true
      }, opts);
      delete loader.isServer;
      delete loader.dev;
      return {
        loader,
        custom
      };
    },

    config(cfg, {
      customOptions: {
        isServer
      }
    }) {
      const options = Object.assign({}, cfg.options);

      if (cfg.hasFilesystemConfig()) {
        for (const file of [cfg.babelrc, cfg.config]) {
          // We only log for client compilation otherwise there will be double output
          if (file && !isServer && !configs.has(file)) {
            configs.add(file); // eslint-disable-next-line no-console

            console.log(`> Using external babel configuration`); // eslint-disable-next-line no-console

            console.log(`> Location: "${file}"`);
          }
        }
      } else {
        // Add our default preset if the no "babelrc" found.
        options.presets = [...options.presets, presetItem];
      }

      return options;
    }

  };
});