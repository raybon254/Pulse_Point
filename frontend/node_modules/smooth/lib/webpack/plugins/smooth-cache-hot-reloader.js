"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function deleteCache(path) {
  try {
    delete require.cache[(0, _fs.realpathSync)(path)];
  } catch (e) {
    if (e.code !== 'ENOENT') throw e;
  } finally {
    delete require.cache[path];
  }
} // This plugin flushes require.cache after emitting the files. Providing 'hot reloading' of server files.


class SmoothRequireCacheHotReloader {
  constructor() {
    _defineProperty(this, "prevAssets", null);
  }

  apply(compiler) {
    compiler.hooks.afterEmit.tapAsync('SmoothRequireCacheHotReloader', (compilation, callback) => {
      const {
        assets
      } = compilation;

      if (this.prevAssets) {
        for (const f of Object.keys(assets)) {
          deleteCache(assets[f].existsAt);
        }

        for (const f of Object.keys(this.prevAssets)) {
          if (!assets[f]) {
            deleteCache(this.prevAssets[f].existsAt);
          }
        }
      }

      this.prevAssets = assets;
      callback();
    });
  }

}

exports.default = SmoothRequireCacheHotReloader;