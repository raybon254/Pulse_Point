"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasHook = hasHook;
exports.runHook = runHook;
exports.runAsyncHook = runAsyncHook;
exports.createApplyAsyncHook = exports.createApplyHook = void 0;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable no-restricted-syntax, no-await-in-loop */
function hasHook(plugin, hook) {
  return Boolean(plugin.plugin[hook]);
}

function runHook(plugin, hook, args) {
  return plugin.plugin[hook](args, plugin.options);
}

async function runAsyncHook(plugin, hook, args) {
  return plugin.plugin[hook](args, plugin.options);
}

const createApplyHook = (plugins, defaultArgs = {}) => (hook, args, resultKey) => {
  let result = resultKey ? args[resultKey] : undefined;

  for (const plugin of plugins) {
    if (hasHook(plugin, hook)) {
      result = runHook(plugin, hook, resultKey ? _extends({}, args, {}, defaultArgs, {
        [resultKey]: result
      }) : _extends({}, args, {}, defaultArgs));
    }
  }

  if (!resultKey) return undefined;
  return result;
};

exports.createApplyHook = createApplyHook;

const createApplyAsyncHook = (plugins, defaultArgs = {}) => async (hook, args, resultKey) => {
  let result = resultKey ? args[resultKey] : undefined;

  for (const plugin of plugins) {
    if (hasHook(plugin, hook)) {
      result = await runAsyncHook(plugin, hook, resultKey ? _extends({}, args, {}, defaultArgs, {
        [resultKey]: result
      }) : _extends({}, args, {}, defaultArgs));
    }
  }

  if (!resultKey) return undefined;
  return result;
};

exports.createApplyAsyncHook = createApplyAsyncHook;