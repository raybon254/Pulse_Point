"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWebpackConfig = getWebpackConfig;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackNodeExternals = _interopRequireDefault(require("webpack-node-externals"));

var _webpackPlugin = _interopRequireDefault(require("@loadable/webpack-plugin"));

var _nodeHooks = require("../plugin/nodeHooks");

var _smoothCacheHotReloader = _interopRequireDefault(require("../webpack/plugins/smooth-cache-hot-reloader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function fileExistsSync(filepath) {
  try {
    return _fs.default.statSync(filepath).isFile();
  } catch (e) {
    // Check exception. If ENOENT - no such file or directory ok, file doesn't exist.
    // Otherwise something else went wrong, we don't have rights to access the file, ...
    if (e.code !== 'ENOENT') {
      throw e;
    }

    return false;
  }
}

function directoryExistsSync(filepath) {
  try {
    return _fs.default.statSync(filepath).isDirectory();
  } catch (e) {
    // Check exception. If ENOENT - no such file or directory ok, file doesn't exist.
    // Otherwise something else went wrong, we don't have rights to access the file, ...
    if (e.code !== 'ENOENT') {
      throw e;
    }

    return false;
  }
}

function getScriptPath(config, script) {
  const customPath = _path.default.join(config.srcPath, script);

  const defaultPath = _path.default.join(__dirname, '../client', script);

  return fileExistsSync(customPath) ? customPath : defaultPath;
}

function getDirectory(config, dirPath, defaultPath) {
  return directoryExistsSync(dirPath) ? dirPath : _path.default.join(config.cachePath, defaultPath);
}

function getStage({
  target,
  dev
}) {
  return `${dev ? 'develop-' : 'build-'}${target}`;
}

function getTargetConfig(target, {
  config,
  dev
}) {
  const mainEntry = _path.default.join(__dirname, '../client', `main-${target}.js`);

  const isServer = target === 'node';
  const babelOptions = (0, _nodeHooks.onCreateBabelConfig)(config)({
    isServer
  });
  const defaultLoaders = {
    babel: {
      loader: 'smooth-babel-loader',
      options: _extends({}, babelOptions, {
        dev,
        isServer,
        cwd: config.cwd,
        caller: {
          target
        }
      })
    }
  };
  const options = {
    isServer,
    defaultLoaders,
    dev
  };
  const blocksPath = getDirectory(config, config.blocksPath, 'default-blocks');
  const defaultWebpackConfig = {
    name: target,
    mode: dev ? 'development' : 'production',
    target,
    entry: target === 'web' && dev ? ['webpack-hot-middleware/client?name=web&reload=true', mainEntry] : mainEntry,
    resolveLoader: {
      modules: [_path.default.join(__dirname, '../webpack/loaders'), 'node_modules']
    },
    module: {
      rules: [{
        test: /\.js$/,
        exclude: /node_modules/,
        use: defaultLoaders.babel
      }]
    },
    resolve: {
      alias: {
        smooth: _path.default.join(__dirname, '..'),
        __smooth_fragmentTypes: _path.default.join(config.cachePath, 'fragmentTypes.json'),
        __smooth_plugins: _path.default.join(config.cachePath, 'browser-plugins.js'),
        __smooth_app: getScriptPath(config, '_app.js'),
        __smooth_html: getScriptPath(config, 'html.js'),
        __smooth_error: getScriptPath(config, '_error.js'),
        __smooth_content: getScriptPath(config, '_content.js'),
        __smooth_blocks: blocksPath,
        __smooth_pages: config.pagesPath
      }
    },
    externals: target === 'node' ? [(0, _webpackNodeExternals.default)({
      whitelist: [/\.(?!(?:jsx?|json)$).{1,5}$/i, /^smooth[/\\]/]
    }), 'graphql/type', 'graphql/language', 'graphql/execution', 'graphql/validation'] : undefined,
    output: {
      path: _path.default.join(config.cachePath, target, 'static'),
      filename: dev ? '[name].js' : '[name]-bundle-[chunkhash:8].js',
      publicPath: `/web/static/`,
      libraryTarget: target === 'node' ? 'commonjs2' : undefined
    },
    plugins: [new _webpack.default.EnvironmentPlugin({
      __smooth_blocks: blocksPath,
      __smooth_pages: config.pagesPath
    }), new _webpackPlugin.default(), ...(target === 'node' && dev ? [new _smoothCacheHotReloader.default()] : []), ...(target === 'web' && dev ? [new _webpack.default.HotModuleReplacementPlugin()] : [])]
  };
  const webpackConfig = (0, _nodeHooks.onCreateWebpackConfig)(config)({
    stage: getStage({
      target,
      dev
    }),
    webpackConfig: defaultWebpackConfig
  });
  return config.webpack(webpackConfig, options);
}

async function getWebpackConfig({
  config,
  dev
}) {
  return [getTargetConfig('web', {
    config,
    dev
  }), getTargetConfig('node', {
    config,
    dev
  })];
}