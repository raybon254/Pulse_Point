"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = getConfig;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _cwd = _interopRequireDefault(require("cwd"));

var _mergeDeep = _interopRequireDefault(require("merge-deep"));

var _require = _interopRequireDefault(require("../babel/require"));

var _webpack = require("./webpack");

var _plugins = require("./plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const exists = (0, _util.promisify)(_fs.default.exists);

async function mergeLocalConfig(configPath, defaultConfig) {
  const configExists = await exists(configPath);

  if (!configExists) {
    return defaultConfig;
  } // eslint-disable-next-line global-require, import/no-dynamic-require


  const localConfig = (0, _require.default)(configPath);
  const config = (0, _mergeDeep.default)(defaultConfig, localConfig);
  if (localConfig.webpack) config.webpack = localConfig.webpack;
  if (localConfig.webpackDevMiddleware) config.webpackDevMiddleware = localConfig.webpackDevMiddleware;
  return config;
}

async function getConfig({
  dev
}) {
  const localCwd = (0, _cwd.default)();
  const defaultConfig = {
    env: process.env.NODE_ENV || 'development',
    cwd: localCwd,
    cache: false,
    cachePath: _path.default.join(localCwd, '.smooth'),
    staticPath: _path.default.join(localCwd, 'static'),
    srcPath: _path.default.join(localCwd, 'src'),
    blocksPath: _path.default.join(localCwd, 'src/blocks'),
    pagesPath: _path.default.join(localCwd, 'src/pages'),
    schemasPath: _path.default.join(localCwd, 'src/schemas'),
    seedsPath: _path.default.join(localCwd, process.env.SEEDS_PATH || './seeds'),
    server: {
      port: process.env.PORT || 3000
    },
    webpackConfig: null,
    plugins: [],
    webpack: x => x,
    webpackDevMiddleware: x => x
  };
  const config = await mergeLocalConfig(_path.default.resolve(localCwd, 'smooth.config.js'), defaultConfig);
  config.plugins = (0, _plugins.parsePlugins)(config.plugins);
  config.webpackConfig = await (0, _webpack.getWebpackConfig)({
    config,
    dev
  });
  return config;
}