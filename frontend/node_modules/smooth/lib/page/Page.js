"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPages = getPages;
exports.default = Page;

var _react = _interopRequireWildcard(require("react"));

var _component = _interopRequireDefault(require("@loadable/component"));

var _smooth_app = _interopRequireDefault(require("__smooth_app"));

var _smooth_content = _interopRequireDefault(require("__smooth_content"));

var _browserHooks = require("../plugin/browserHooks");

var _PageContext = require("./PageContext");

var _HiddenRouter = require("../router/HiddenRouter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function getFileName(filePath) {
  return filePath.replace(/^\.\//, '').replace(/\.js$/, '');
}

function getIndexPath(isIndex, name) {
  return isIndex ? '/' : `/${name}`;
}

function getRoutePath(isIndex, isWildCard, name) {
  if (isWildCard) return isIndex ? '/:slug*' : `/${name}/:slug+`;
  return getIndexPath(isIndex, name);
}

function getPage(filePath) {
  const rawName = getFileName(filePath);
  const isWildCard = !rawName.endsWith('$');
  const name = rawName.replace('$', '');
  const isIndex = name === 'index';
  const indexPath = getIndexPath(isIndex, name);
  const routePath = getRoutePath(isIndex, isWildCard, name);

  const LoadableComponent = _component.default.lib({
    chunkName() {
      return `__smooth_pages-${rawName}`.replace(/[^a-zA-Z0-9_!§$()=\-^°]+/g, "-");
    },

    isReady(props) {
      if (typeof __webpack_modules__ !== 'undefined') {
        return !!__webpack_modules__[this.resolve(props)];
      }

      return false;
    },

    requireAsync: () => import(
    /* webpackChunkName: "__smooth_pages-[request]" */
    `__smooth_pages/${rawName}`),

    requireSync(props) {
      const id = this.resolve(props);

      if (typeof __webpack_require__ !== 'undefined') {
        return __webpack_require__(id);
      }

      return eval('module.require')(id);
    },

    resolve() {
      if (require.resolveWeak) {
        return require.resolveWeak(`__smooth_pages/${rawName}`);
      }

      return eval('require.resolve')(`__smooth_pages/${rawName}`);
    }

  });

  return {
    isIndex,
    isWildCard,
    indexPath,
    routePath,
    filePath,
    LoadableComponent
  };
} // First content, then indexes


function sortPages(a, b) {
  if (a.isWildCard === b.isWildCard) {
    if (a.isIndex === b.isIndex) return 0;
    return a.isIndex < b.isIndex ? -1 : 1;
  }

  return a.isWildCard < b.isWildCard ? -1 : 1;
}

function getPages() {
  const req = require.context(process.env.__smooth_pages, true, /\.js$/, 'weak');

  return req.keys().map(getPage).sort(sortPages);
}

function getContentSlug({
  match,
  history,
  location,
  pageRef
}) {
  const {
    module: pageModule,
    isWildCard
  } = pageRef.current;

  if (!isWildCard) {
    if (!pageModule.contentSlug) {
      return pageRef.current.routePath.replace(/^\//, '');
    }

    return typeof pageModule.contentSlug === 'function' ? pageModule.contentSlug({
      history,
      location
    }) : pageModule.contentSlug;
  }

  return match.params.slug;
}

function enrichPageRef(pageRef, {
  module: pageModule,
  indexUrl,
  match,
  history,
  location
}) {
  const isContent = Boolean(pageModule.contentFragment);
  pageRef.current.module = pageModule;
  pageRef.current.isContent = isContent;
  pageRef.current.indexUrl = indexUrl;

  if (isContent) {
    pageRef.current.slug = getContentSlug({
      match,
      history,
      location,
      pageRef
    });

    if (!pageRef.current.ContentComponent && !pageRef.current.PageComponent) {
      const ContentComponent = props => {
        const Component = pageRef.current.module.default;

        const element = _react.default.createElement(Component, props);

        return (0, _browserHooks.wrapContentElement)({
          element,
          props
        });
      };

      const PageComponent = () => _react.default.createElement(_smooth_content.default, {
        Component: ContentComponent
      });

      pageRef.current.ContentComponent = ContentComponent;
      pageRef.current.PageComponent = PageComponent;
    }
  } else {
    pageRef.current.PageComponent = pageModule.default;
  }
}

function usePageRef(page) {
  return (0, _react.useRef)(_extends({}, page));
}

function Page({
  page,
  indexUrl,
  history,
  match,
  location
}) {
  const pageRef = usePageRef(page);
  const unpause = (0, _HiddenRouter.usePause)();
  return _react.default.createElement(page.LoadableComponent, null, pageModule => {
    unpause();
    enrichPageRef(pageRef, {
      module: pageModule,
      indexUrl,
      match,
      history,
      location
    });
    const pageContext = {
      page: pageRef.current
    };
    return _react.default.createElement(_PageContext.PageContextProvider, {
      context: pageContext
    }, _react.default.createElement(_smooth_app.default, _extends({}, pageContext, {
      Component: pageRef.current.PageComponent
    })));
  });
}