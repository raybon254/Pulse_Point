"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Query = Query;

var _react = _interopRequireDefault(require("react"));

var _camelcase = _interopRequireDefault(require("camelcase"));

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var _router = require("../router");

var _PageContext = require("../page/PageContext");

var _HTTPError = require("../router/HTTPError");

var _browserHooks = require("../plugin/browserHooks");

var _Query = require("../query/Query");

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getQueryField(type) {
  return (0, _camelcase.default)(type);
}

function getQuery(page) {
  const fragment = (0, _util.getFragment)(page.module, 'contentFragment', page.filePath);
  const fragmentDefinition = (0, _util.getFragmentDefinition)(fragment, page.filePath);
  const type = (0, _util.getDefinitionType)(fragmentDefinition);
  const queryField = getQueryField(type);
  const fragmentName = (0, _util.getDefinitionName)(fragmentDefinition);
  const fields = (0, _browserHooks.onSelectContentFields)({
    fragmentName
  });
  const query = _graphqlTag.default`
    query Content(
      $slug: String!
    ) {
      contentProps: ${queryField}(slug: $slug) {
        ${fields}
      }
    }

    ${fragment}
  `;
  return query;
}

function Handler(_ref) {
  let {
    children
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  if (!props.loading && !props.error && !props.data.contentProps) {
    return children(_extends({}, props, {
      error: new _HTTPError.HTTPError({
        statusCode: 404
      })
    }));
  }

  return children(props);
}

function Query({
  children
}) {
  const page = (0, _PageContext.usePage)();
  const {
    location
  } = (0, _router.useRouter)();

  if (page.slug === 'index') {
    return _react.default.createElement(_router.Redirect, {
      to: `${page.indexUrl}${location.search}`
    });
  }

  return _react.default.createElement(_Query.Query, {
    query: getQuery(page),
    variables: {
      slug: page.slug || 'index'
    },
    pageContent: true
  }, apolloProps => _react.default.createElement(Handler, apolloProps, children));
}