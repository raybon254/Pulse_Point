"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Blocks = Blocks;
exports.BlockFragment = void 0;

var _react = _interopRequireDefault(require("react"));

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getBlock(filePath, exp) {
  const fragment = (0, _util.getFragment)(exp, 'blockFragment', filePath);
  const fragmentDefinition = (0, _util.getFragmentDefinition)(fragment);
  const Component = (0, _util.getComponent)(exp, filePath);
  const type = (0, _util.getDefinitionType)(fragmentDefinition);
  const name = (0, _util.getDefinitionName)(fragmentDefinition);
  const propsAttribute = `${type}_props`;
  const propsQuery = `${propsAttribute} { ...${name} }`;
  return {
    type,
    Component,
    fragment,
    propsAttribute,
    propsQuery
  };
}

function getBlocks() {
  const req = require.context(process.env.__smooth_blocks, true, /\.js$/, 'sync');

  return req.keys().map(filePath => getBlock(filePath, req(filePath)));
}

const blocks = getBlocks();
const blocksByType = blocks.reduce((obj, block) => {
  obj[block.type] = block;
  return obj;
}, {});
const BlockFragment = _graphqlTag.default`
  fragment BlockFragment on Block {
    type
    ${blocks.map(block => block.propsQuery).join('')}
  }

  ${blocks.map(block => (0, _util.getFragmentString)(block.fragment)).join('')}
`;
exports.BlockFragment = BlockFragment;

function Blocks({
  blocks: blocksProp
}) {
  if (!blocksProp) return null;
  return blocksProp.map((_ref, index) => {
    let {
      type
    } = _ref,
        props = _objectWithoutPropertiesLoose(_ref, ["type"]);

    const block = blocksByType[type];

    if (!block) {
      throw new Error(`Block "${type}" is not found`);
    }

    return _react.default.createElement(block.Component, _extends({
      key: index
    }, props[block.propsAttribute]));
  });
}